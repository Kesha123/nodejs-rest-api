name: Docker Build and Push


on:
  workflow_dispatch:
    inputs:
      TAG:
        type: string
        required: true
        description: 'The associated tag for the Docker image'
  workflow_call:
    inputs:
      TAG:
        type: string
        required: true
    outputs:
      image:
        value: ${{ jobs.merge.outputs.image }}


env:
  IMAGE_REPOSITORY: ghcr.io/kesha123/nodejs-rest-api
  IMAGE_NAME: api


jobs:
  build-push-api-image:
    name: Build & Push API Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Prepare
      run: |
        platform=${{ matrix.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_REPOSITORY }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ./api
        file: ./docker/Dockerfile
        platforms: ${{ matrix.platform }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=image,"name=${{ env.IMAGE_REPOSITORY }}",push=true
        tags: |
          ${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ inputs.TAG }}
        cache-from: type=registry,ref=${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:buildcahe
        cache-to: type=registry,ref=${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:buildcahe,mode=max

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

  merge:
    name: Merge digests
    runs-on: ubuntu-latest
    needs: build-push-api-image
    outputs:
      image: ${{ steps.set_output.outputs.image }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create \
          --tag ${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ inputs.TAG }} \
          ${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Set Output
        id: set_output
        run: |
          echo 'image={"api":"${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"}' >> $GITHUB_OUTPUT
